{
	"lhRedux": {
		"prefix": "lhRedux",
		"body": [
			"import { get } from 'lodash';",
			"import initialState from './state';",
			"",
			"import { LHGetExpectedProperties } from 'lhUtil';",
			"",
			"// Action Types",
			"export const types = {",
			" ${1}_INIT: '${1}_INIT',",
			" ${1}_DESTROY: '${1}_DESTROY',",
			" ${1}_SET_VIEW_STATE: '${1}_SET_VIEW_STATE',",
			" ${1}_SET_DATA_STATE: '${1}_SET_DATA_STATE',",
			"};",
			"",
			"// Action Creators",
			"export const actions = {",
			"  init: () => ({",
			"    type: types.${1}_INIT,",
			"  }),",
			"",
			" destroy: () => ({",
			"    type: types.${1}_DESTROY,",
			"  }),",
			"",
			"  setViewState: payload => ({",
			"    type: types.${1}_SET_VIEW_STATE,",
			"    payload: LHGetExpectedProperties({",
			"      defaultState: get(initialState, '${1/(.*)/${1:/camelcase}/}.view'),",
			"      payload,",
			"    }),",
			"  }),",
			"",
			"  setDataState: payload => ({",
			"    type: types.${1}_SET_DATA_STATE,",
			"    payload: LHGetExpectedProperties({",
			"      defaultState: get(initialState, '${1/(.*)/${1:/camelcase}/}.data'),",
			"      payload,",
			"    }),",
			"  }),",
			"};",
			"",
			"// Reducers",
			"const viewReducer = (state, { type, payload }) => {",
			"  switch (type) {",
			"    case types.${1}_SET_VIEW_STATE:",
			"      return { ...state, ...payload };",
			"",
			"    default:",
			"      return state;",
			"  }",
			"};",
			"",
			"const dataReducer = (state, { type, payload }) => {",
			"  switch (type) {",
			"    case types.${1}_SET_DATA_STATE:",
			"      return { ...state, ...payload };",
			"",
			"    default:",
			"      return state;",
			"  }",
			"};",
			"",
			"export default (state = initialState, action) => {",
			"    switch (action.type) {",
			"    case types.${1}_DESTROY:",
			"      return { ...state, ${1/(.*)/${1:/camelcase}/}: initialState.${1/(.*)/${1:/camelcase}/} };",
			"",
			"    default: {",
			"      return {",
			"        ...state,",
			"        ${1/(.*)/${1:/camelcase}/}: {",
			"          view: viewReducer(selectors.getView(state), action),",
			"          data: dataReducer(selectors.getData(state), action),",
			"        },",
			"      };",
			"    }",
			"  }",
			"};",
			"",
			"// Selectors",
			"const Path = {",
			"  VIEW: ['${1/(.*)/${1:/camelcase}/}', 'view'],",
			"  DATA: ['${1/(.*)/${1:/camelcase}/}', 'data'],",
			"};",
			"",
			"export const selectors = {",
			"  getView: state => get(state, Path.VIEW, {}),",
			"  getData: state => get(state, Path.DATA, {}),",
			"};",
			""
		],
		"description": "lhRedux"
	}
}